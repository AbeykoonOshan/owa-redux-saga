"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[179],{3905:function(e,r,t){t.d(r,{Zo:function(){return l},kt:function(){return h}});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=n.createContext({}),p=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},l=function(e){var r=p(e.components);return n.createElement(c.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(t),h=o,f=d["".concat(c,".").concat(h)]||d[h]||u[h]||a;return t?n.createElement(f,i(i({ref:r},l),{},{components:t})):n.createElement(f,i({ref:r},l))}));function h(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var s={};for(var c in r)hasOwnProperty.call(r,c)&&(s[c]=r[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=t[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1059:function(e,r,t){t.r(r),t.d(r,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return l},default:function(){return d}});var n=t(7462),o=t(3366),a=(t(7294),t(3905)),i=["components"],s={title:"Error Handling",hide_title:!0},c="Error handling",p={unversionedId:"basics/ErrorHandling",id:"basics/ErrorHandling",isDocsHomePage:!1,title:"Error Handling",description:"In this section we'll see how to handle the failure case from the previous example. Let's suppose that our API function Api.fetch returns a Promise which gets rejected when the remote fetch fails for some reason.",source:"@site/../docs/basics/ErrorHandling.md",sourceDirName:"basics",slug:"/basics/ErrorHandling",permalink:"/docs/basics/ErrorHandling",editUrl:"https://github.com/redux-saga/redux-saga/edit/main/docs/../docs/basics/ErrorHandling.md",tags:[],version:"current",frontMatter:{title:"Error Handling",hide_title:!0},sidebar:"docs",previous:{title:"Effect",permalink:"/docs/basics/Effect"},next:{title:"Using Saga Helpers",permalink:"/docs/basics/UsingSagaHelpers"}},l=[{value:"onError hook",id:"onerror-hook",children:[],level:2}],u={toc:l};function d(e){var r=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"error-handling"},"Error handling"),(0,a.kt)("p",null,"In this section we'll see how to handle the failure case from the previous example. Let's suppose that our API function ",(0,a.kt)("inlineCode",{parentName:"p"},"Api.fetch")," returns a Promise which gets rejected when the remote fetch fails for some reason."),(0,a.kt)("p",null,"We want to handle those errors inside our Saga by dispatching a ",(0,a.kt)("inlineCode",{parentName:"p"},"PRODUCTS_REQUEST_FAILED")," action to the Store."),(0,a.kt)("p",null,"We can catch errors inside the Saga using the familiar ",(0,a.kt)("inlineCode",{parentName:"p"},"try/catch")," syntax."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import Api from './path/to/api'\nimport { call, put } from 'redux-saga/effects'\n\n// ...\n\nfunction* fetchProducts() {\n  try {\n    const products = yield call(Api.fetch, '/products')\n    yield put({ type: 'PRODUCTS_RECEIVED', products })\n  }\n  catch(error) {\n    yield put({ type: 'PRODUCTS_REQUEST_FAILED', error })\n  }\n}\n")),(0,a.kt)("p",null,"In order to test the failure case, we'll use the ",(0,a.kt)("inlineCode",{parentName:"p"},"throw")," method of the Generator"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import { call, put } from 'redux-saga/effects'\nimport Api from '...'\n\nconst iterator = fetchProducts()\n\n// expects a call instruction\nassert.deepEqual(\n  iterator.next().value,\n  call(Api.fetch, '/products'),\n  \"fetchProducts should yield an Effect call(Api.fetch, './products')\"\n)\n\n// create a fake error\nconst error = {}\n\n// expects a dispatch instruction\nassert.deepEqual(\n  iterator.throw(error).value,\n  put({ type: 'PRODUCTS_REQUEST_FAILED', error }),\n  \"fetchProducts should yield an Effect put({ type: 'PRODUCTS_REQUEST_FAILED', error })\"\n)\n")),(0,a.kt)("p",null,"In this case, we're passing the ",(0,a.kt)("inlineCode",{parentName:"p"},"throw")," method a fake error. This will cause the Generator to break the current flow and execute the catch block."),(0,a.kt)("p",null,"Of course, you're not forced to handle your API errors inside ",(0,a.kt)("inlineCode",{parentName:"p"},"try"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"catch")," blocks. You can also make your API service return a normal value with some error flag on it. For example, you can catch Promise rejections and map them to an object with an error field."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import Api from './path/to/api'\nimport { call, put } from 'redux-saga/effects'\n\nfunction fetchProductsApi() {\n  return Api.fetch('/products')\n    .then(response => ({ response }))\n    .catch(error => ({ error }))\n}\n\nfunction* fetchProducts() {\n  const { response, error } = yield call(fetchProductsApi)\n  if (response)\n    yield put({ type: 'PRODUCTS_RECEIVED', products: response })\n  else\n    yield put({ type: 'PRODUCTS_REQUEST_FAILED', error })\n}\n")),(0,a.kt)("h2",{id:"onerror-hook"},"onError hook"),(0,a.kt)("p",null,"Errors in forked tasks ",(0,a.kt)("a",{parentName:"p",href:"/docs/api#error-propagation"},"bubble up to their parents"),"\nuntil it is caught or reaches the root saga.\nIf an error propagates to the root saga the whole saga tree is already ",(0,a.kt)("strong",{parentName:"p"},"terminated"),". The preferred approach, in this case, to use ",(0,a.kt)("a",{parentName:"p",href:"/docs/api#error-propagation#createsagamiddlewareoptions"},"onError hook")," to report an exception, inform a user about the problem and gracefully terminate your app."),(0,a.kt)("p",null,"Why can't I use ",(0,a.kt)("inlineCode",{parentName:"p"},"onError")," hook as a global error handler?\nUsually, there is no one-size-fits-all solution, as exceptions are context dependent. Consider ",(0,a.kt)("inlineCode",{parentName:"p"},"onError")," hook as the last resort that helps you to handle ",(0,a.kt)("strong",{parentName:"p"},"unexpected")," errors."),(0,a.kt)("p",null,"What if I don't want an error to bubble?\nConsider to use safe wrapper. You can find examples ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/redux-saga/redux-saga/issues/1250"},"here")))}d.isMDXComponent=!0}}]);