"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[870],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return f}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(t),f=a,g=d["".concat(s,".").concat(f)]||d[f]||p[f]||l;return t?r.createElement(g,o(o({ref:n},u),{},{components:t})):r.createElement(g,o({ref:n},u))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,o=new Array(l);o[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var c=2;c<l;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1925:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var r=t(7462),a=t(3366),l=(t(7294),t(3905)),o=["components"],i={title:"Running Tasks In Parallel",hide_title:!0},s="Running Tasks In Parallel",c={unversionedId:"advanced/RunningTasksInParallel",id:"advanced/RunningTasksInParallel",isDocsHomePage:!1,title:"Running Tasks In Parallel",description:"The yield statement is great for representing asynchronous control flow in a linear style, but we also need to do things in parallel. We can't write:",source:"@site/../docs/advanced/RunningTasksInParallel.md",sourceDirName:"advanced",slug:"/advanced/RunningTasksInParallel",permalink:"/docs/advanced/RunningTasksInParallel",editUrl:"https://github.com/redux-saga/redux-saga/edit/main/docs/../docs/advanced/RunningTasksInParallel.md",tags:[],version:"current",frontMatter:{title:"Running Tasks In Parallel",hide_title:!0},sidebar:"docs",previous:{title:"Root Saga",permalink:"/docs/advanced/RootSaga"},next:{title:"Task Cancellation",permalink:"/docs/advanced/TaskCancellation"}},u=[],p={toc:u};function d(e){var n=e.components,t=(0,a.Z)(e,o);return(0,l.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"running-tasks-in-parallel"},"Running Tasks In Parallel"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"yield")," statement is great for representing asynchronous control flow in a linear style, but we also need to do things in parallel. We can't write:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"// wrong, effects will be executed in sequence\nconst users = yield call(fetch, '/users')\nconst repos = yield call(fetch, '/repos')\n")),(0,l.kt)("p",null,"Because the 2nd effect will not get executed until the first call resolves. Instead we have to write:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"import { all, call } from 'redux-saga/effects'\n\n// correct, effects will get executed in parallel\nconst [users, repos] = yield all([\n  call(fetch, '/users'),\n  call(fetch, '/repos')\n])\n")),(0,l.kt)("p",null,"When we yield an array of effects, the generator is blocked until all the effects are resolved or as soon as one is rejected (just like how ",(0,l.kt)("inlineCode",{parentName:"p"},"Promise.all")," behaves)."))}d.isMDXComponent=!0}}]);